CSC 2150  		October 12, 2023
Big O Exercises: 

1.
public static int sum(int[] array) {
	int sum = 0;
	int i = 9;
	int n = array.length;

	while (i <n) {
		sum += array[i];
		i++;
	}
	return sum;
}

2.
private static int aStrangeOne(int n) {
    int sum = 0;
    for( int i=0; i<n; i++ ){
        sum++;
    }
    for( int i=n; i>0; i-- ){
        sum++;
    }
    return sum;
}

3. 
public static int bigO(int n){
    int sum = 0;
    for( int i=0; i< n; i++){
        sum += getNext( n );
    }
    return sum;
}

private static int getNext(int n) {
    int s  = 0;
    for( int i=0; i< n; i++){
        s+=i;
    }
    return s;
}

4.
private static int BigO2(int n, int m) {
    int x = 100_000;
    int ct = 0;
    for( int i=0; i<n; i++){
        for( int j = 0; j<m; j++) {
            ct += i+j;
        }
    }
    return ct;
}

5.
private static void BigO3(int inN ) {
    for( int i=inN; i>10; i--){
        System.out.printf("\n MyI=%s", i);
    }
}

6. 
private static int Big04(int[][] myBoard) {
    int sum = 0;
    for( int i=0; i<myBoard.length; i++){
        for( int j=0; j<myBoard.length; j++) {
            if ( i%2 == 0 ) {
                sum += myBoard[i][j];
            }
        }
    }
    return sum;
}

7.
private static int BigO5(int size) {
    int sum = 0;
    for( int i=0; i<size; i++){
        sum += i;
        if ( i > 1000 ) break;
    }
    return sum;
}

8. 
private static int BigO6(int size) {
    int sum = 0;
    for( int i=0; i<size; i++){
        for ( int k=0; k<100_000/2; k++)
           sum += i;
    }
    return sum;
}

9. 
private static int BigO7(int size) {
    int sum = 0;
    for( int i=0; i<size; i++){
        size = size / 2;
        sum += size;
    }
    return sum;
}

10.
private static int BigOTrouble(int first, int second) {
    int x = 100_000;
    int ct = 0;
    for( int i=0; i<first; i++){
        for( int j = 0; j<x; j++) {
            ct += i+j;
        }
    }
    for( int i=0; i<second; i++){
        ct += i;
    }

    return ct;
}

11.
public static int search(int[] array, int value)
{
  int first;
  int last;
  int middle;
  int position;
  boolean found;
  int count = 0;

  first = 0;
  last = array.length - 1;
  position = -1;
  found = false;

  while (!found && first <= last)
  {
     count++;
     middle = (first + last) / 2;
     
     if (array[middle] == value)
     {
        found = true;
        position = middle;
     }
     else if (array[middle] > value)
        last = middle - 1;
     else
        first = middle + 1;
  }
  System.out.println("Searched " + count + " times");
  return position;
}

12. 
public static void bubbleSort(int[] array)
{
  int lastPos;
  int index;
  int temp; 
  
  for (lastPos = array.length - 1; lastPos >= 0; lastPos--)
  {
     for (index = 0; index <= lastPos - 1; index++)
     {
        if (array[index] > array[index + 1])
        {
           temp = array[index];
           array[index] = array[index + 1];
           array[index + 1] = temp;
        }
     }
   }
}

13.
private static boolean checkChar(String myString, char c) {
    int ct = 0;
    for( int i=0; i<myString.length(); i++ ){
        if ( myString.charAt(i) == c){
            return true;
        }
    }
    return false;
}

14.
public static int method(int[] array) {
	int greatest = array[0];
	int i = 1;
	int n = array.length;

	while (i < n) {
		if (array[i] > greatest)
		greatest = array[i];
		i++;
	}
	return greatest;
}

15.
public static void method(int[] array)
{
  int unsortedValue;
  int scan;
  
  for (int index = 1; index < array.length; index++)
  {
     unsortedValue = array[index];
     scan = index;
     
     while (scan > 0 && array[scan-1] > unsortedValue)
     {
        array[scan] = array[scan - 1];
        scan--;
     }
     array[scan] = unsortedValue;
  }
}

16.
public static int search(int[] array, int value)
{
  int index = 0, count = 0;
  int position = -1;
  boolean found = false;
  int n = array.length;

  while (!found && index < n)
  {
     if (array[index] == value)
     {
        found = true;
        position = index;
     }
     index++;
     count++;
  }
  System.out.println("Count value is " + count);
  return position;
}

17.
public static void selectionSort(int[] array)
{
  int startScan;
  int index; 
  int minIndex; 
  int minValue; 

  for (startScan = 0; startScan < (array.length-1); startScan++)
  {
     minIndex = startScan;
     minValue = array[startScan];
     
     for(index = startScan + 1; index < array.length; index++)
     {
        if (array[index] < minValue)
        {
           minValue = array[index];
           minIndex = index;
        }
     }

     array[minIndex] = array[startScan];
     array[startScan] = minValue;
  }
}

18.
private static int tryThis(int n) {
    int sum = 0;
    for ( int i=n; i>50; i-- ){
        sum += doPart2( n );
    }
    return sum;
}

private static int doPart2(int n) {
    if ( n > 100 ){
        n += 10;
    }
    if ( n > 1000 ) n += 1;
    int x = 50;
    n = x + 10;
    n  = n + 1;
    if ( n > 100 ) n++;
    return n;
}

19.
private static int anotherStrangeOne(int[] myList2) {
    int sum = 0;
    for (int item : myList2){
        for ( int i=0; i<myList2.length; i++) {
            sum += myList2[i];
            i = i * 2;
        }
    }
    return sum;
}

